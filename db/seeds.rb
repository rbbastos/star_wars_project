# frozen_string_literal: true

Character.destroy_all
Inhabit.destroy_all
Specie.destroy_all
Planet.destroy_all
Starship.destroy_all

csv_file_characters = Rails.root + 'db/characters.csv'
options = { file_encoding: 'iso-8859-1' } # Only needed if the CSV file was generated by Excel.
charactersCSV = SmarterCSV.process(csv_file_characters, options) # Pass the "options" hash as a second argument if CSV was created by Excel.

csv_file_planets = Rails.root + 'db/planets.csv'
options = { file_encoding: 'iso-8859-1' } # Only needed if the CSV file was generated by Excel.
planetsCSV = SmarterCSV.process(csv_file_planets, options) # Pass the "options" hash as a second argument if CSV was created by Excel.

csv_file_species = Rails.root + 'db/species.csv'
options = { file_encoding: 'iso-8859-1' } # Only needed if the CSV file was generated by Excel.
speciesCSV = SmarterCSV.process(csv_file_species, options) # Pass the "options" hash as a second argument if CSV was created by Excel.

csv_file_starships = Rails.root + 'db/starships.csv'
options = { file_encoding: 'iso-8859-1' } # Only needed if the CSV file was generated by Excel.
starshipsCSV = SmarterCSV.process(csv_file_starships, options) # Pass the "options" hash as a second argument if CSV was created by Excel.

planetsCount = planetsCSV.count
charactersCount = charactersCSV.count
speciesCount = speciesCSV.count
starshipsCount = starshipsCSV.count
f = planetsCSV.first
puts f[:name]
puts f[:population]

# create Starships
# starship = Starship.new
rand(1..starshipsCount).times do
  name = starshipsCSV[rand(starshipsCSV.length)]
  # name and model presence: true
  starship = Starship.create(
    name: name[:name],
    model: name[:model],
    crew: name[:crew]
  )

  # planet = Planet.new
  # rand(1..planetsCount).times do
  name = planetsCSV[rand(planetsCSV.length)]
  # name and model presence: true
  planet = Planet.create(
    name: name[:name],
    population: name[:population]
  )

  specie = Specie.new
  rand(1..speciesCount).times do
    name = speciesCSV[rand(speciesCSV.length)]
    # name and model presence: true
    specie = Specie.create(
      name: name[:name],
      language: name[:language]
    )
  end

  rand(1..charactersCount).times do
    name = charactersCSV[rand(charactersCSV.length)]
    character = Character.create(
      name: name[:name],
      starship_id: starship.id,
      planet_id: planet.id,
      specie_id: specie.id
    )
    # puts character.name
  end
end

puts "Generated #{Starship.count} starships."
puts "Generated #{Planet.count} planets."
puts "Generated #{Specie.count} species."
puts "Generated #{Character.count} characters."
